# #  comment
# () grouping
# [] optional
# *  zero or more
# +  one or more
# |  alternative


program    ::= (include)* (structdecl | vardecl | fundecl)* EOF

include    ::= "#include" STRING_LITERAL

structdecl ::= structtype "{" (vardecl)+ "}" ";"    # structure declaration

vardecl    ::= type IDENT ("[" INT_LITERAL "]")* ";" # normal declaration, (e.g. int a;), or multi-dimensional array declaration, (e.g. int a[2][5];)

fundecl    ::= type IDENT "(" params ")" block    # function declaration

type       ::= ("int" | "char" | "void" | structtype) ("*")*
structtype ::= "struct" IDENT

params     ::= [ type IDENT ("," type IDENT)* ]

stmt       ::= block
             | "while" "(" exp ")" stmt              # while loop
             | "if" "(" exp ")" stmt ["else" stmt]   # if then else
             | "return" [exp] ";"                    # return
             | exp ";"                               # expression statement, e.g. a function call

block      ::= "{" (vardecl)* (stmt)* "}"


exp        ::= term term_tail

term       ::= factor factor_tail

term_tail  := ('+'|'-') term term_tail | eps

factor     ::= (IDENT | INT_LITERAL | CHAR_LITERAL | STRING_LITERAL)
             | arrayaccess | fieldaccess | valueat | addressof | funcall | sizeof | typecast
             | "(" exp ")"
             | "=" exp

factor_tail := ('*'|'/') factor factor_tail | eps









exp        ::= (IDENT | INT_LITERAL)
             | ("-" | "+") exp
             | CHAR_LITERAL
             | STRING_LITERAL
             | valueat | addressof | funcall | sizeof | typecast


exp_tail  ::= "(" exp ")"
            |  "=" exp  # assignment
            |  (">" | "<" | ">=" | "<=" | "!=" | "==" | "+" | "-" | "/" | "*" | "%" | "||" | "&&") exp # binary operators
            |  arrayaccess
            |  fieldaccess
            |  eps


exp     ::= (IDENT | INT_LITERAL)
          | "(" exp ")"
          | arrayaccess
          | fieldaccess

exp2    ::= ( "+" | "-")
          | typecast
          | "*"
          | "&"

exp3    ::= ("*" | "/")

exp4    ::= ("+" | "-")

exp5    ::= ("<" | "<=" | ">" | ">=")

exp6    ::= ("==" | "!=")

exp7    ::= ("&&")

exp8    ::= ("||")

exp9    ::= exp "=" exp


#PREC 1
funcall      ::= IDENT "(" [ exp ("," exp)* ] ")" # function call
arrayaccess  ::= exp "[" exp "]"                  # array access
fieldaccess  ::= exp "." IDENT                    # structure field member access
sizeof       ::= "sizeof" "(" type ")"            # size of type

#PREC 2
valueat      ::= "*" exp                          # Value at operator (pointer indirection)
addressof    ::= "&" exp                          # Address-of operator
typecast     ::= "(" type ")" exp                 # type casting
uplus        ::= "+"
uminus       ::= "-"

#PREC 3
mo           ::= ("*" | "/")

#PREC 4
ao           ::= ("+" | "-")

#PREC 5
ro_f           ::= (">" | "<" | ">=" | "<=")

#PREC 6
ro_s           ::= ("==" | "!=")

#PREC 7
log_a          ::= ("&&")

#PREC 8
log_o          ::= ("||")

#PREC 9
assign         ::= ("=")

